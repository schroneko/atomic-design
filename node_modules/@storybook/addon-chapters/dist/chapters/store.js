'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.switchTo = switchTo;
exports.jumpTo = jumpTo;
exports.setStore = setStore;
exports.getStore = getStore;
exports.addRoot = addRoot;
exports.setCurrentChapter = setCurrentChapter;
exports.getEnabledMap = getEnabledMap;
exports.setEnabledMap = setEnabledMap;
exports.storiesEnable = storiesEnable;

var _addonLinks = require('@storybook/addon-links');

var _utils = require('./utils');

var _navigate = require('./navigate');

/** note: `channelStore`
  * store to communicate through the channel
  * via [storybook-adk](https://github.com/sm-react/storybook-adk)
  * we need it to fetch and set querry data here
  */
var channelStore = null;
// let queryData = {}; // todo: remove

var chapterRootMap = {};
/**
 * chapterRootMap = { (consists all chapter branches)
 *   chapterRoot : {
 *     chapter : { the root chapter object (see createChapter() in addon.js) },
 *     current : { the current chapter object },
 *     enabled : { is this branch enabled (see treeEnable() in addon.js) },
 *   }
 * }
 * 
 */
var currentChapter = null;
var currentStory = null;

function findRoot(chapter) {
    var rootName = (0, _utils.breadcrumbs)(chapter)[0].name;
    return chapterRootMap[rootName] || null;
}

function findSubchapter(chapter, name) {
    if (chapter.name === name) {
        return chapter;
    }
    if (chapter.parent && chapter.parent.name === name) {
        return chapter.parent;
    }
    var resultChapter = null;
    chapter.subchapters.forEach(function (subChapter) {
        var result = findSubchapter(subChapter, name);
        if (result) {
            resultChapter = result;
        }
    });
    return resultChapter;
}

function findChapterByKey(kindKey) {
    var roots = Object.keys(chapterRootMap);
    var resultChapter = null;
    if (currentChapter) {
        resultChapter = findSubchapter(currentChapter, kindKey);
        if (resultChapter) return resultChapter;
    }
    roots.forEach(function (rootChapter) {
        var result = findSubchapter(chapterRootMap[rootChapter].chapter, kindKey);
        if (result) {
            resultChapter = result;
        }
    });
    return resultChapter;
}

function lookForPath(chapNamesArr, currChap) {
    if (chapNamesArr.length === 0) {
        return currChap;
    }
    var nextName = chapNamesArr[0];
    var nextChap = currChap.subchapters.find(function (val) {
        return val.name === nextName;
    });
    if (nextChap) {
        return lookForPath(chapNamesArr.slice(1), nextChap);
    }
    return null;
}

function checkPath(chapNamesArr) {
    var lookingChap = chapterRootMap[chapNamesArr[0]];
    if (!lookingChap) return false;
    return lookForPath(chapNamesArr.slice(1), lookingChap.chapter);
}

function switchTo(chapterObj, storyKey) {
    var currenChapter = findRoot(chapterObj).current;
    (0, _navigate.chapterSelect)(chapterObj, currenChapter.name)();
    (0, _addonLinks.linkTo)(chapterObj.name, storyKey)();
}

function jumpTo(chapterKey, storyKey) {
    var chapterObj = findChapterByKey(chapterKey);
    return function () {
        switchTo(chapterObj, storyKey);
    };
}

function setStore(store) {
    channelStore = store;
    var stopWatch = channelStore.watch('onStory', function (_ref) {
        var kind = _ref.kind;
        var name = _ref.name;

        var newChapter = findChapterByKey(kind);
        currentStory = name; // string
        (0, _navigate.chapterSelect)(newChapter, findRoot(newChapter).chapter.name)();
        (0, _addonLinks.linkTo)(newChapter.name, currentStory)();
        currentChapter = newChapter;
        stopWatch();
    });
}

function getStore() {
    return channelStore;
}

function addRoot(chapter) {
    var root = {
        chapter: chapter,
        current: chapter, // ??
        enable: true };
    chapterRootMap[chapter.name] = root;
    return root;
}

function setCurrentChapter(chapter) {
    var rootStored = findRoot(chapter);
    if (rootStored) {
        rootStored.current = chapter;
    }
}

function getEnabledMap() {
    var keys = Object.keys(chapterRootMap);
    var map = {};
    keys.forEach(function (val) {
        map[val] = chapterRootMap[val].enable;
    });
    return map;
}

function setEnabledMap(map) {
    var keys = Object.keys(map);
    var chapterRoots = Object.keys(chapterRootMap);
    keys.forEach(function (val) {
        if (chapterRoots.find(function (name) {
            return name === val;
        })) {
            chapterRoots[val].enable = map[val];
            storiesEnable(chapterRoots[val], map[val]);
        }
    });
}

function sendEnabledMap(rootStored) {
    var storedMap = channelStore.get('enabledMap');
    if (!storedMap || !storedMap[rootStored.chapter.name] || storedMap[rootStored.chapter.name].enable !== rootStored.enable) {
        channelStore.set('enabledMap', getEnabledMap());
    }
}

/*
export function storiesDisable(chapter) {
    const rootStored = findRoot(chapter);
    if (rootStored && rootStored.enable) {
        rootStored.enable = false;
        chapterHide(rootStored.current);
        sendEnabledMap(rootStored);
    }
}
*/

function storiesEnable(chapter) {
    var isEnable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var rootStored = findRoot(chapter);
    if (rootStored && rootStored.enable !== isEnable) {
        rootStored.enable = isEnable;
        if (isEnable) {
            (0, _navigate.chapterShow)(rootStored.current);
        } else {
            (0, _navigate.chapterHide)(rootStored.current);
        }

        sendEnabledMap(rootStored);
    }
}