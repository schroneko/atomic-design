'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addSerializer = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _jestSnapshot = require('jest-snapshot');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint no-underscore-dangle: ["error", { "allow": ["_updateSnapshot"] }] */
var snapshotsStateMap = new Map();

function getAbsolutePathToSnapshot(testPath, snapshotFile) {
  return _path2.default.isAbsolute(snapshotFile) ? snapshotFile : _path2.default.resolve(_path2.default.dirname(testPath), snapshotFile);
}

afterAll(function () {
  snapshotsStateMap.forEach(function (snapshotState) {
    var uncheckedCount = snapshotState.getUncheckedCount();

    if (uncheckedCount) {
      snapshotState.removeUncheckedKeys();
    }

    snapshotState.save();
  });
});

expect.extend({
  toMatchSpecificSnapshot: function toMatchSpecificSnapshot(received, snapshotFile) {
    var absoluteSnapshotFile = getAbsolutePathToSnapshot(this.testPath, snapshotFile);

    var commonSnapshotState = this.snapshotState;
    var snapshotState = snapshotsStateMap.get(absoluteSnapshotFile);

    if (!snapshotState) {
      snapshotState = new _jestSnapshot.SnapshotState(absoluteSnapshotFile, {
        updateSnapshot: commonSnapshotState._updateSnapshot,
        snapshotPath: absoluteSnapshotFile
      });
      snapshotsStateMap.set(absoluteSnapshotFile, snapshotState);
    }

    var newThis = Object.assign({}, this, { snapshotState: snapshotState });
    var patchedToMatchSnapshot = _jestSnapshot.toMatchSnapshot.bind(newThis);

    return patchedToMatchSnapshot(received);
  }
});

exports.addSerializer = _jestSnapshot.addSerializer;