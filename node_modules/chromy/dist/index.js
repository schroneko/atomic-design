'use strict';

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = require('fs');
var nodeUrl = require('url');

/**
 * Chrome Debugging Protocol wrapper class
 *
 * @external CDP
 *
 * @see {@link https://www.npmjs.com/package/chrome-remote-interface#cdpoptions-callback}
 */
var CDP = require('chrome-remote-interface');
var uuidV4 = require('uuid/v4');
var devices = require('./devices');

var _require = require('./emulation'),
    createFullscreenEmulationManager = _require.createFullscreenEmulationManager;

var Jimp = require('jimp');

var Document = require('./document');

var _require2 = require('./error'),
    TimeoutError = _require2.TimeoutError,
    GotoTimeoutError = _require2.GotoTimeoutError;

var _require3 = require('./util'),
    createChromeLauncher = _require3.createChromeLauncher,
    completeUrl = _require3.completeUrl;

var instances = [];
var instanceId = 1;

function makeSendToChromy(uuid) {
  return '\n  function () {\n    console.info(\'' + uuid + ':\' + JSON.stringify(arguments))\n  }\n  ';
}

function defaultTargetFunction(targets) {
  return targets.filter(function (t) {
    return t.type === 'page';
  }).shift();
}

var Chromy = function (_Document) {
  (0, _inherits3.default)(Chromy, _Document);

  function Chromy() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, Chromy);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Chromy.__proto__ || Object.getPrototypeOf(Chromy)).call(this, null, null, null));

    var chromePath = null;
    if (options.chromePath) {
      chromePath = options.chromePath;
    } else if (process.env.CHROME_PATH) {
      chromePath = process.env.CHROME_PATH;
    }
    var defaults = {
      host: 'localhost',
      port: 9222,
      launchBrowser: true,
      userDataDir: null,
      chromeFlags: [],
      chromePath: chromePath,
      enableExtensions: false,
      activateOnStartUp: true,
      waitTimeout: 30000,
      gotoTimeout: 30000,
      loadTimeout: 30000,
      evaluateTimeout: 30000,
      waitFunctionPollingInterval: 100,
      typeInterval: 20,
      target: defaultTargetFunction
    };
    _this.options = Object.assign({}, defaults, options);
    _this.cdpOptions = {
      host: _this.options.host,
      port: _this.options.port,
      target: _this.options.target
    };
    _this.client = null;
    _this.launcher = null;
    _this.messagePrefix = null;
    _this.emulateMode = false;
    _this.currentEmulateDeviceName = null;
    _this.currentDeviceScaleFactor = null;
    _this.userAgentBeforeEmulate = null;
    _this.instanceId = instanceId++;
    return _this;
  }

  (0, _createClass3.default)(Chromy, [{
    key: 'start',
    value: function start() {
      var _this2 = this;

      var startingUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return _regenerator2.default.async(function start$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (startingUrl === null) {
                startingUrl = 'about:blank';
              }

              if (!(this.client !== null)) {
                _context3.next = 3;
                break;
              }

              return _context3.abrupt('return');

            case 3:
              if (!this.options.launchBrowser) {
                _context3.next = 13;
                break;
              }

              if (!(this.launcher === null)) {
                _context3.next = 10;
                break;
              }

              _context3.next = 7;
              return _regenerator2.default.awrap(createChromeLauncher(completeUrl(startingUrl), this.options));

            case 7:
              this.launcher = _context3.sent;

              this._sigintHandler = function _callee() {
                return _regenerator2.default.async(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return _regenerator2.default.awrap(_this2.close());

                      case 2:
                        process.exit(130);

                      case 3:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, null, _this2);
              };
              process.on('SIGINT', this._sigintHandler);

            case 10:
              if (this.launcher.pid) {
                _context3.next = 12;
                break;
              }

              throw new Error('Failed to launch a browser.');

            case 12:
              instances.push(this);

            case 13:
              _context3.next = 15;
              return _regenerator2.default.awrap(new Promise(function (resolve, reject) {
                CDP(_this2.cdpOptions, function _callee2(client) {
                  var DOM, Network, Page, Runtime, Console, targetId;
                  return _regenerator2.default.async(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.prev = 0;

                          _this2.client = client;
                          DOM = client.DOM, Network = client.Network, Page = client.Page, Runtime = client.Runtime, Console = client.Console;
                          _context2.next = 5;
                          return _regenerator2.default.awrap(Promise.all([DOM.enable(), Network.enable(), Page.enable(), Runtime.enable(), Console.enable()]));

                        case 5:
                          _context2.next = 7;
                          return _regenerator2.default.awrap(_this2._cacheChromeVersion());

                        case 7:
                          if (_this2._chromeVersion < 61) {
                            console.warn('Chromy requires Chrome ver.61 or later. Please install latest version Chrome.');
                          }

                          // activate first tab

                          if (!_this2.options.activateOnStartUp) {
                            _context2.next = 14;
                            break;
                          }

                          _context2.next = 11;
                          return _regenerator2.default.awrap(_this2._getTargetIdFromOption());

                        case 11:
                          targetId = _context2.sent;
                          _context2.next = 14;
                          return _regenerator2.default.awrap(_this2.client.Target.activateTarget({ targetId: targetId }));

                        case 14:
                          if (!('userAgent' in _this2.options)) {
                            _context2.next = 17;
                            break;
                          }

                          _context2.next = 17;
                          return _regenerator2.default.awrap(_this2.userAgent(_this2.options.userAgent));

                        case 17:
                          if (!('headers' in _this2.options)) {
                            _context2.next = 20;
                            break;
                          }

                          _context2.next = 20;
                          return _regenerator2.default.awrap(_this2.headers(_this2.options.headers));

                        case 20:
                          _this2._activateOnDocumentUpdatedListener();
                          resolve(_this2);
                          _context2.next = 27;
                          break;

                        case 24:
                          _context2.prev = 24;
                          _context2.t0 = _context2['catch'](0);

                          reject(_context2.t0);

                        case 27:
                        case 'end':
                          return _context2.stop();
                      }
                    }
                  }, null, _this2, [[0, 24]]);
                }).on('error', function (err) {
                  reject(err);
                });
              }).catch(function (e) {
                throw e;
              }));

            case 15:
            case 'end':
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_getTargetIdFromOption',
    value: function _getTargetIdFromOption() {
      var result, page;
      return _regenerator2.default.async(function _getTargetIdFromOption$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!(typeof this.options.target === 'function')) {
                _context4.next = 8;
                break;
              }

              _context4.next = 3;
              return _regenerator2.default.awrap(this.client.Target.getTargets());

            case 3:
              result = _context4.sent;
              page = this.options.target(result.targetInfos);
              return _context4.abrupt('return', page.targetId);

            case 8:
              if (!((0, _typeof3.default)(this.options.target) === 'object')) {
                _context4.next = 12;
                break;
              }

              return _context4.abrupt('return', this.options.target.targetId);

            case 12:
              if (!(typeof this.options.target === 'string')) {
                _context4.next = 16;
                break;
              }

              return _context4.abrupt('return', this.options.target);

            case 16:
              throw new Error('type of `target` option is invalid.');

            case 17:
            case 'end':
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'close',
    value: function close() {
      var _this3 = this;

      return _regenerator2.default.async(function close$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!(this.client === null)) {
                _context5.next = 2;
                break;
              }

              return _context5.abrupt('return', false);

            case 2:
              _context5.next = 4;
              return _regenerator2.default.awrap(this.client.close());

            case 4:
              this.client = null;

              if (!(this.launcher !== null)) {
                _context5.next = 10;
                break;
              }

              _context5.next = 8;
              return _regenerator2.default.awrap(this.launcher.kill());

            case 8:
              process.removeListener('SIGINT', this._sigintHandler);
              this.launcher = null;

            case 10:
              instances = instances.filter(function (i) {
                return i.instanceId !== _this3.instanceId;
              });
              return _context5.abrupt('return', true);

            case 12:
            case 'end':
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'getPageTargets',
    value: function getPageTargets() {
      var result;
      return _regenerator2.default.async(function getPageTargets$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return _regenerator2.default.awrap(this.client.Target.getTargets());

            case 2:
              result = _context6.sent;
              return _context6.abrupt('return', result.targetInfos.filter(function (t) {
                return t.type === 'page';
              }));

            case 4:
            case 'end':
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'userAgent',
    value: function userAgent(ua) {
      return _regenerator2.default.async(function userAgent$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              _context7.next = 4;
              return _regenerator2.default.awrap(this.client.Network.setUserAgentOverride({ 'userAgent': ua }));

            case 4:
              return _context7.abrupt('return', _context7.sent);

            case 5:
            case 'end':
              return _context7.stop();
          }
        }
      }, null, this);
    }

    /**
     * Example:
     * chromy.headers({'X-Requested-By': 'foo'})
     */

  }, {
    key: 'headers',
    value: function headers(_headers) {
      return _regenerator2.default.async(function headers$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              _context8.next = 4;
              return _regenerator2.default.awrap(this.client.Network.setExtraHTTPHeaders({ 'headers': _headers }));

            case 4:
              return _context8.abrupt('return', _context8.sent);

            case 5:
            case 'end':
              return _context8.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'ignoreCertificateErrors',
    value: function ignoreCertificateErrors() {
      var _this4 = this;

      return _regenerator2.default.async(function ignoreCertificateErrors$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              _context9.next = 4;
              return _regenerator2.default.awrap(this.client.Security.enable());

            case 4:
              _context9.next = 6;
              return _regenerator2.default.awrap(this.client.Security.setOverrideCertificateErrors({ override: true }));

            case 6:
              _context9.next = 8;
              return _regenerator2.default.awrap(this.client.Security.certificateError(function (_ref) {
                var eventId = _ref.eventId;

                _this4.client.Security.handleCertificateError({
                  eventId: eventId,
                  action: 'continue'
                });
              }));

            case 8:
            case 'end':
              return _context9.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'console',
    value: function (_console) {
      function console(_x) {
        return _console.apply(this, arguments);
      }

      console.toString = function () {
        return _console.toString();
      };

      return console;
    }(function _callee3(callback) {
      var _this5 = this;

      return _regenerator2.default.async(function _callee3$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              this.client.Console.messageAdded(function (payload) {
                try {
                  var msg = payload.message.text;
                  var pre = _this5.messagePrefix;
                  if (typeof msg !== 'undefined') {
                    if (pre === null || msg.substring(0, pre.length + 1) !== pre + ':') {
                      callback.apply(_this5, [msg, payload.message]);
                    }
                  }
                } catch (e) {
                  console.warn(e);
                }
              });

            case 3:
            case 'end':
              return _context10.stop();
          }
        }
      }, null, this);
    })
  }, {
    key: 'receiveMessage',
    value: function receiveMessage(callback) {
      var _this6 = this;

      var uuid, f;
      return _regenerator2.default.async(function receiveMessage$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              uuid = uuidV4();

              this.messagePrefix = uuid;
              f = makeSendToChromy(this.messagePrefix);

              this.defineFunction({ sendToChromy: f });
              this.client.Console.messageAdded(function (payload) {
                try {
                  var msg = payload.message.text;
                  if (msg && msg.substring(0, uuid.length + 1) === uuid + ':') {
                    var data = JSON.parse(msg.substring(uuid.length + 1));
                    callback.apply(_this6, [data]);
                  }
                } catch (e) {
                  console.warn(e);
                }
              });

            case 7:
            case 'end':
              return _context11.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'goto',
    value: function goto(url, options) {
      var _this7 = this;

      var defaultOptions, response, requestListener, requestEventName, listener, eventName;
      return _regenerator2.default.async(function goto$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              // correct url form.
              url = nodeUrl.format(nodeUrl.parse(url));
              defaultOptions = {
                waitLoadEvent: true
              };

              options = Object.assign({}, defaultOptions, options);
              _context13.next = 5;
              return _regenerator2.default.awrap(this._checkStart(url));

            case 5:
              response = null;
              // truck redirects.

              requestListener = function requestListener(payload) {
                if (payload.redirectResponse && payload.redirectResponse.url === url) {
                  url = payload.redirectResponse.headers.location;
                }
              };

              requestEventName = 'Network.requestWillBeSent';
              _context13.next = 10;
              return _regenerator2.default.awrap(this.on(requestEventName, requestListener));

            case 10:
              listener = function listener(payload) {
                if (payload.response.url === url) {
                  response = payload.response;
                }
              };

              eventName = 'Network.responseReceived';
              _context13.next = 14;
              return _regenerator2.default.awrap(this.on(eventName, listener));

            case 14:
              _context13.prev = 14;
              _context13.next = 17;
              return _regenerator2.default.awrap(this._waitFinish(this.options.gotoTimeout, function _callee4() {
                return _regenerator2.default.async(function _callee4$(_context12) {
                  while (1) {
                    switch (_context12.prev = _context12.next) {
                      case 0:
                        _context12.next = 2;
                        return _regenerator2.default.awrap(_this7.client.Page.navigate({ url: completeUrl(url) }));

                      case 2:
                        if (!options.waitLoadEvent) {
                          _context12.next = 5;
                          break;
                        }

                        _context12.next = 5;
                        return _regenerator2.default.awrap(_this7.client.Page.loadEventFired());

                      case 5:
                      case 'end':
                        return _context12.stop();
                    }
                  }
                }, null, _this7);
              }));

            case 17:
              _context13.next = 26;
              break;

            case 19:
              _context13.prev = 19;
              _context13.t0 = _context13['catch'](14);

              if (!(_context13.t0 instanceof TimeoutError)) {
                _context13.next = 25;
                break;
              }

              throw new GotoTimeoutError('goto() timeout');

            case 25:
              throw _context13.t0;

            case 26:
              _context13.prev = 26;
              _context13.next = 29;
              return _regenerator2.default.awrap(this.removeListener(eventName, listener));

            case 29:
              _context13.next = 31;
              return _regenerator2.default.awrap(this.removeListener(requestEventName, requestListener));

            case 31:
              return _context13.finish(26);

            case 32:
              return _context13.abrupt('return', response);

            case 33:
            case 'end':
              return _context13.stop();
          }
        }
      }, null, this, [[14, 19, 26, 32]]);
    }
  }, {
    key: 'waitLoadEvent',
    value: function waitLoadEvent() {
      var _this8 = this;

      return _regenerator2.default.async(function waitLoadEvent$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return _regenerator2.default.awrap(this._waitFinish(this.options.loadTimeout, function _callee5() {
                return _regenerator2.default.async(function _callee5$(_context14) {
                  while (1) {
                    switch (_context14.prev = _context14.next) {
                      case 0:
                        _context14.next = 2;
                        return _regenerator2.default.awrap(_this8.client.Page.loadEventFired());

                      case 2:
                      case 'end':
                        return _context14.stop();
                    }
                  }
                }, null, _this8);
              }));

            case 2:
            case 'end':
              return _context15.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'forward',
    value: function forward() {
      var f, promise;
      return _regenerator2.default.async(function forward$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              f = 'window.history.forward()';
              promise = this.waitLoadEvent();
              _context16.next = 4;
              return _regenerator2.default.awrap(this.client.Runtime.evaluate({ expression: f }));

            case 4:
              _context16.next = 6;
              return _regenerator2.default.awrap(promise);

            case 6:
            case 'end':
              return _context16.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'back',
    value: function back() {
      var f, promise;
      return _regenerator2.default.async(function back$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              f = 'window.history.back()';
              promise = this.waitLoadEvent();
              _context17.next = 4;
              return _regenerator2.default.awrap(this.client.Runtime.evaluate({ expression: f }));

            case 4:
              _context17.next = 6;
              return _regenerator2.default.awrap(promise);

            case 6:
            case 'end':
              return _context17.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'reload',
    value: function reload(ignoreCache, scriptToEvaluateOnLoad) {
      return _regenerator2.default.async(function reload$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return _regenerator2.default.awrap(this.client.Page.reload({ ignoreCache: ignoreCache, scriptToEvaluateOnLoad: scriptToEvaluateOnLoad }));

            case 2:
            case 'end':
              return _context18.stop();
          }
        }
      }, null, this);
    }

    /**
     * define function
     *
     * @param func {(function|string|Array.<function>|Array.<string>)}
     * @returns {Promise.<void>}
     */

  }, {
    key: 'defineFunction',
    value: function defineFunction(def) {
      var funcs, i, f;
      return _regenerator2.default.async(function defineFunction$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              funcs = [];

              if (Array.isArray(def)) {
                funcs = def;
              } else if ((typeof def === 'undefined' ? 'undefined' : (0, _typeof3.default)(def)) === 'object') {
                funcs = this._moduleToFunctionSources(def);
              } else {
                funcs.push(def);
              }
              i = 0;

            case 3:
              if (!(i < funcs.length)) {
                _context19.next = 11;
                break;
              }

              f = funcs[i];

              if (typeof f === 'function') {
                f = f.toString();
              }
              _context19.next = 8;
              return _regenerator2.default.awrap(this.client.Runtime.evaluate({ expression: f }));

            case 8:
              i++;
              _context19.next = 3;
              break;

            case 11:
            case 'end':
              return _context19.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_moduleToFunctionSources',
    value: function _moduleToFunctionSources(module) {
      var result = [];
      for (var funcName in module) {
        var func = module[funcName];
        var src = ('function ' + funcName + ' () { return (' + func.toString() + ')(...arguments) }').trim();
        result.push(src);
      }
      return result;
    }
  }, {
    key: 'mouseMoved',
    value: function mouseMoved(x, y) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var opts;
      return _regenerator2.default.async(function mouseMoved$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              opts = Object.assign({ type: 'mouseMoved', x: x, y: y }, options);
              _context20.next = 3;
              return _regenerator2.default.awrap(this.client.Input.dispatchMouseEvent(opts));

            case 3:
            case 'end':
              return _context20.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'mousePressed',
    value: function mousePressed(x, y) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var opts;
      return _regenerator2.default.async(function mousePressed$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              opts = Object.assign({ type: 'mousePressed', x: x, y: y, button: 'left' }, options);
              _context21.next = 3;
              return _regenerator2.default.awrap(this.client.Input.dispatchMouseEvent(opts));

            case 3:
            case 'end':
              return _context21.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'mouseReleased',
    value: function mouseReleased(x, y) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var opts;
      return _regenerator2.default.async(function mouseReleased$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              opts = Object.assign({ type: 'mouseReleased', x: x, y: y, button: 'left' }, options);
              _context22.next = 3;
              return _regenerator2.default.awrap(this.client.Input.dispatchMouseEvent(opts));

            case 3:
            case 'end':
              return _context22.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'tap',
    value: function tap(x, y) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var time, opts;
      return _regenerator2.default.async(function tap$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              time = Date.now() / 1000;
              opts = Object.assign({ x: x, y: y, timestamp: time, button: 'left' }, options);
              _context23.next = 4;
              return _regenerator2.default.awrap(this.client.Input.synthesizeTapGesture(opts));

            case 4:
            case 'end':
              return _context23.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'doubleTap',
    value: function doubleTap(x, y) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var time, opts;
      return _regenerator2.default.async(function doubleTap$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              time = Date.now() / 1000;
              opts = Object.assign({ x: x, y: y, timestamp: time, button: 'left', tapCount: 2 }, options);
              _context24.next = 4;
              return _regenerator2.default.awrap(this.client.Input.synthesizeTapGesture(opts));

            case 4:
            case 'end':
              return _context24.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'setFile',
    value: function setFile(selector, files) {
      var paramFiles, _ref2, root, _ref3, fileNodeId;

      return _regenerator2.default.async(function setFile$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              paramFiles = files;

              if (typeof files === 'string') {
                paramFiles = [files];
              }

              if (!(paramFiles.length === 0)) {
                _context25.next = 4;
                break;
              }

              return _context25.abrupt('return');

            case 4:
              _context25.next = 6;
              return _regenerator2.default.awrap(this.client.DOM.getDocument());

            case 6:
              _ref2 = _context25.sent;
              root = _ref2.root;
              _context25.next = 10;
              return _regenerator2.default.awrap(this.client.DOM.querySelector({
                nodeId: root.nodeId,
                selector: selector
              }));

            case 10:
              _ref3 = _context25.sent;
              fileNodeId = _ref3.nodeId;

              if (fileNodeId) {
                _context25.next = 14;
                break;
              }

              return _context25.abrupt('return');

            case 14:
              _context25.next = 16;
              return _regenerator2.default.awrap(this.client.DOM.setFileInputFiles({
                nodeId: fileNodeId,
                files: paramFiles
              }));

            case 16:
            case 'end':
              return _context25.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'screenshot',
    value: function screenshot() {
      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'png';
      var quality = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var fromSurface = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var opts, params, captureParams, captureResult, image, screen, promise;
      return _regenerator2.default.async(function screenshot$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              opts = {
                format: 'png',
                fromSurface: true,
                useDeviceResolution: false
              };

              if (typeof format === 'string') {
                // deprecated arguments style
                params = {
                  format: format,
                  quality: quality,
                  fromSurface: fromSurface
                };

                opts = Object.assign({}, opts, params);
              } else if ((typeof format === 'undefined' ? 'undefined' : (0, _typeof3.default)(format)) === 'object') {
                opts = Object.assign({}, opts, format);
              }

              if (!(['png', 'jpeg'].indexOf(opts.format) === -1)) {
                _context26.next = 4;
                break;
              }

              throw new Error('format is invalid.');

            case 4:
              captureParams = Object.assign({}, opts);

              delete captureParams.useDeviceResolution;
              _context26.next = 8;
              return _regenerator2.default.awrap(this.client.Page.captureScreenshot(captureParams));

            case 8:
              captureResult = _context26.sent;
              image = Buffer.from(captureResult.data, 'base64');

              if (opts.useDeviceResolution) {
                _context26.next = 19;
                break;
              }

              _context26.next = 13;
              return _regenerator2.default.awrap(this._getScreenInfo());

            case 13:
              screen = _context26.sent;

              if (!(screen.devicePixelRatio !== 1)) {
                _context26.next = 19;
                break;
              }

              promise = new Promise(function (resolve, reject) {
                Jimp.read(image, function (err, img) {
                  if (err) {
                    return reject(err);
                  }
                  var fmt = opts.format === 'png' ? Jimp.MIME_PNG : Jimp.MIME_JPEG;
                  var quality = 100;
                  if (opts.quality) {
                    quality = opts.quality;
                  }
                  img.scale(1.0 / screen.devicePixelRatio, Jimp.RESIZE_BEZIER).quality(quality).getBuffer(fmt, function (err, buffer) {
                    if (err) {
                      reject(err);
                    } else {
                      resolve(buffer);
                    }
                  });
                });
              });
              _context26.next = 18;
              return _regenerator2.default.awrap(promise);

            case 18:
              image = _context26.sent;

            case 19:
              return _context26.abrupt('return', image);

            case 20:
            case 'end':
              return _context26.stop();
          }
        }
      }, null, this);
    }

    /*
     * Limitation:
     * maximum height is 16384px because of chrome's bug from Skia library.
     * https://groups.google.com/a/chromium.org/d/msg/headless-dev/DqaAEXyzvR0/kUTEqNYiDQAJ
     * https://stackoverflow.com/questions/44599858/max-height-of-16-384px-for-headless-chrome-screenshots
     */

  }, {
    key: 'screenshotDocument',
    value: function screenshotDocument() {
      var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'scroll';
      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'png';
      var quality = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var fromSurface = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var opts, params, emulation, result, screenshotParams;
      return _regenerator2.default.async(function screenshotDocument$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              opts = {
                model: 'scroll',
                format: 'png',
                fromSurface: true,
                useDeviceResolution: false
              };

              if (typeof model === 'string') {
                params = {
                  model: model,
                  format: format,
                  quality: quality,
                  fromSurface: fromSurface
                };

                opts = Object.assign({}, opts, params);
              } else if ((typeof model === 'undefined' ? 'undefined' : (0, _typeof3.default)(model)) === 'object') {
                opts = Object.assign({}, opts, model);
              }
              _context27.next = 4;
              return _regenerator2.default.awrap(createFullscreenEmulationManager(this, opts.model, false, opts.useDeviceResolution));

            case 4:
              emulation = _context27.sent;
              result = null;
              _context27.prev = 6;
              _context27.next = 9;
              return _regenerator2.default.awrap(emulation.emulate());

            case 9:
              // device resolution is already emulated by emulation manager, so useDeviceResotion must be set true
              screenshotParams = Object.assign({}, opts, { useDeviceResolution: true });

              delete screenshotParams.model;
              _context27.next = 13;
              return _regenerator2.default.awrap(this.screenshot(screenshotParams));

            case 13:
              result = _context27.sent;

            case 14:
              _context27.prev = 14;
              _context27.next = 17;
              return _regenerator2.default.awrap(emulation.reset());

            case 17:
              _context27.next = 19;
              return _regenerator2.default.awrap(this._restoreEmulationSetting());

            case 19:
              return _context27.finish(14);

            case 20:
              return _context27.abrupt('return', result);

            case 21:
            case 'end':
              return _context27.stop();
          }
        }
      }, null, this, [[6,, 14, 20]]);
    }
  }, {
    key: 'screenshotSelector',
    value: function screenshotSelector(selector) {
      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'png';
      var quality = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var fromSurface = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var opts, params;
      return _regenerator2.default.async(function screenshotSelector$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              opts = {
                format: 'png',
                fromSurface: true,
                useDeviceResolution: false
              };

              if (typeof format === 'string') {
                params = {
                  format: format,
                  quality: quality,
                  fromSurface: fromSurface
                };

                opts = Object.assign({}, opts, params);
              } else if ((typeof format === 'undefined' ? 'undefined' : (0, _typeof3.default)(format)) === 'object') {
                opts = Object.assign({}, opts, format);
              }
              return _context28.abrupt('return', this._screenshotSelector(selector, opts));

            case 3:
            case 'end':
              return _context28.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_screenshotSelector',
    value: function _screenshotSelector(selector, opts) {
      var emulation, buffer, rect, clip, screenshotOpts, _ref4, data;

      return _regenerator2.default.async(function _screenshotSelector$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              _context29.next = 2;
              return _regenerator2.default.awrap(createFullscreenEmulationManager(this, 'scroll', true, opts.useDeviceResolution));

            case 2:
              emulation = _context29.sent;
              buffer = null;
              _context29.prev = 4;
              _context29.next = 7;
              return _regenerator2.default.awrap(emulation.emulate());

            case 7:
              _context29.next = 9;
              return _regenerator2.default.awrap(this.scrollTo(0, 0));

            case 9:
              _context29.next = 11;
              return _regenerator2.default.awrap(this.getBoundingClientRect(selector));

            case 11:
              rect = _context29.sent;

              if (!(!rect || rect.width === 0 || rect.height === 0)) {
                _context29.next = 14;
                break;
              }

              return _context29.abrupt('return', null);

            case 14:
              clip = {
                x: rect.left,
                y: rect.top,
                width: rect.width,
                height: rect.height,
                scale: 1
              };
              screenshotOpts = Object.assign({}, opts, { clip: clip });
              _context29.next = 18;
              return _regenerator2.default.awrap(this.client.Page.captureScreenshot(screenshotOpts));

            case 18:
              _ref4 = _context29.sent;
              data = _ref4.data;

              buffer = Buffer.from(data, 'base64');

            case 21:
              _context29.prev = 21;

              emulation.reset();
              return _context29.finish(21);

            case 24:
              return _context29.abrupt('return', buffer);

            case 25:
            case 'end':
              return _context29.stop();
          }
        }
      }, null, this, [[4,, 21, 24]]);
    }
  }, {
    key: 'screenshotMultipleSelectors',
    value: function screenshotMultipleSelectors(selectors, callback) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return _regenerator2.default.async(function screenshotMultipleSelectors$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              return _context30.abrupt('return', this._screenshotMultipleSelectors(selectors, callback, options));

            case 1:
            case 'end':
              return _context30.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_screenshotMultipleSelectors',
    value: function _screenshotMultipleSelectors(selectors, callback) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var defaults, opts, emulation, selIdx, selector, rects, r, err, rectIdx, rect, clip, screenshotOpts, _ref5, data, buffer;

      return _regenerator2.default.async(function _screenshotMultipleSelectors$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              defaults = {
                model: 'scroll',
                format: 'png',
                quality: undefined,
                fromSurface: true,
                useDeviceResolution: false,
                useQuerySelectorAll: false
              };
              opts = Object.assign({}, defaults, options);
              _context31.next = 4;
              return _regenerator2.default.awrap(createFullscreenEmulationManager(this, 'scroll', true, opts.useDeviceResolution));

            case 4:
              emulation = _context31.sent;
              _context31.next = 7;
              return _regenerator2.default.awrap(emulation.emulate());

            case 7:
              _context31.prev = 7;
              selIdx = 0;

            case 9:
              if (!(selIdx < selectors.length)) {
                _context31.next = 53;
                break;
              }

              selector = selectors[selIdx];
              _context31.prev = 11;
              rects = null;

              if (!opts.useQuerySelectorAll) {
                _context31.next = 20;
                break;
              }

              _context31.next = 16;
              return _regenerator2.default.awrap(this.rectAll(selector));

            case 16:
              rects = _context31.sent;

              // remove elements that has 'display: none'
              rects = rects.filter(function (rect) {
                return rect.width !== 0 && rect.height !== 0;
              });
              _context31.next = 24;
              break;

            case 20:
              _context31.next = 22;
              return _regenerator2.default.awrap(this.getBoundingClientRect(selector));

            case 22:
              r = _context31.sent;

              if (r && r.width !== 0 && r.height !== 0) {
                rects = [r];
              }

            case 24:
              if (!(rects.length === 0)) {
                _context31.next = 29;
                break;
              }

              err = { reason: 'notfound', message: 'selector is not found. selector=' + selector };
              _context31.next = 28;
              return _regenerator2.default.awrap(callback.apply(this, [err, null, selIdx, selectors]));

            case 28:
              return _context31.abrupt('continue', 50);

            case 29:
              rectIdx = 0;

            case 30:
              if (!(rectIdx < rects.length)) {
                _context31.next = 44;
                break;
              }

              rect = rects[rectIdx];
              clip = {
                x: rect.left,
                y: rect.top,
                width: rect.width,
                height: rect.height,
                scale: 1
              };
              screenshotOpts = Object.assign({
                format: opts.format,
                quality: opts.quality,
                fromSurface: opts.fromSurface,
                clip: clip
              });
              _context31.next = 36;
              return _regenerator2.default.awrap(this.client.Page.captureScreenshot(screenshotOpts));

            case 36:
              _ref5 = _context31.sent;
              data = _ref5.data;
              buffer = Buffer.from(data, 'base64');
              _context31.next = 41;
              return _regenerator2.default.awrap(callback.apply(this, [null, buffer, selIdx, selectors, rectIdx]));

            case 41:
              rectIdx++;
              _context31.next = 30;
              break;

            case 44:
              _context31.next = 50;
              break;

            case 46:
              _context31.prev = 46;
              _context31.t0 = _context31['catch'](11);
              _context31.next = 50;
              return _regenerator2.default.awrap(callback.apply(this, [_context31.t0, null, selIdx, selectors]));

            case 50:
              selIdx++;
              _context31.next = 9;
              break;

            case 53:
              _context31.prev = 53;
              _context31.next = 56;
              return _regenerator2.default.awrap(emulation.reset());

            case 56:
              _context31.next = 58;
              return _regenerator2.default.awrap(this._restoreEmulationSetting());

            case 58:
              return _context31.finish(53);

            case 59:
            case 'end':
              return _context31.stop();
          }
        }
      }, null, this, [[7,, 53, 59], [11, 46]]);
    }
  }, {
    key: 'pdf',
    value: function pdf() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _ref6, data;

      return _regenerator2.default.async(function pdf$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              _context32.next = 2;
              return _regenerator2.default.awrap(this.client.Page.printToPDF(options));

            case 2:
              _ref6 = _context32.sent;
              data = _ref6.data;
              return _context32.abrupt('return', Buffer.from(data, 'base64'));

            case 5:
            case 'end':
              return _context32.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'startScreencast',
    value: function startScreencast(callback) {
      var _this9 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return _regenerator2.default.async(function startScreencast$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return _regenerator2.default.awrap(this.client.Page.screencastFrame(function _callee6(payload) {
                return _regenerator2.default.async(function _callee6$(_context33) {
                  while (1) {
                    switch (_context33.prev = _context33.next) {
                      case 0:
                        _context33.next = 2;
                        return _regenerator2.default.awrap(callback.apply(_this9, [payload]));

                      case 2:
                        _context33.next = 4;
                        return _regenerator2.default.awrap(_this9.client.Page.screencastFrameAck({ sessionId: payload.sessionId }));

                      case 4:
                      case 'end':
                        return _context33.stop();
                    }
                  }
                }, null, _this9);
              }));

            case 2:
              _context34.next = 4;
              return _regenerator2.default.awrap(this.client.Page.startScreencast(options));

            case 4:
            case 'end':
              return _context34.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'stopScreencast',
    value: function stopScreencast() {
      return _regenerator2.default.async(function stopScreencast$(_context35) {
        while (1) {
          switch (_context35.prev = _context35.next) {
            case 0:
              _context35.next = 2;
              return _regenerator2.default.awrap(this.client.Page.stopScreencast());

            case 2:
            case 'end':
              return _context35.stop();
          }
        }
      }, null, this);
    }

    // deprecated since 0.3.4

  }, {
    key: 'requestWillBeSent',
    value: function requestWillBeSent(callback) {
      return _regenerator2.default.async(function requestWillBeSent$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              _context36.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              _context36.next = 4;
              return _regenerator2.default.awrap(this.client.Network.requestWillBeSent(callback));

            case 4:
            case 'end':
              return _context36.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'send',
    value: function send(event, parameter) {
      return _regenerator2.default.async(function send$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              _context37.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              return _context37.abrupt('return', this.client.send(event, parameter));

            case 3:
            case 'end':
              return _context37.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'on',
    value: function on(event, callback) {
      return _regenerator2.default.async(function on$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              this.client.on(event, callback);

            case 3:
            case 'end':
              return _context38.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'once',
    value: function once(event, callback) {
      return _regenerator2.default.async(function once$(_context39) {
        while (1) {
          switch (_context39.prev = _context39.next) {
            case 0:
              _context39.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              this.client.once(event, callback);

            case 3:
            case 'end':
              return _context39.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'removeListener',
    value: function removeListener(event, callback) {
      return _regenerator2.default.async(function removeListener$(_context40) {
        while (1) {
          switch (_context40.prev = _context40.next) {
            case 0:
              _context40.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              this.client.removeListener(event, callback);

            case 3:
            case 'end':
              return _context40.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(event) {
      return _regenerator2.default.async(function removeAllListeners$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              _context41.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              this.client.removeAllListeners(event);

            case 3:
            case 'end':
              return _context41.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'inject',
    value: function inject(type, fileOrBuffer) {
      var data, script, expr, style, _expr;

      return _regenerator2.default.async(function inject$(_context42) {
        while (1) {
          switch (_context42.prev = _context42.next) {
            case 0:
              if (!(fileOrBuffer instanceof Buffer)) {
                _context42.next = 4;
                break;
              }

              _context42.t0 = fileOrBuffer.toString('utf8');
              _context42.next = 7;
              break;

            case 4:
              _context42.next = 6;
              return _regenerator2.default.awrap(new Promise(function (resolve, reject) {
                fs.readFile(fileOrBuffer, { encoding: 'utf-8' }, function (err, data) {
                  if (err) reject(err);
                  resolve(data);
                });
              }).catch(function (e) {
                throw e;
              }));

            case 6:
              _context42.t0 = _context42.sent;

            case 7:
              data = _context42.t0;

              if (!(type === 'js')) {
                _context42.next = 14;
                break;
              }

              script = data.replace(/\\/g, '\\\\').replace(/'/g, '\\\'').replace(/(\r|\n)/g, '\\n');
              expr = '\n      {\n         let script = document.createElement(\'script\')\n         script.type = \'text/javascript\'\n         script.innerHTML = \'' + script + '\'\n         document.body.appendChild(script)\n      }\n      ';
              return _context42.abrupt('return', this.evaluate(expr));

            case 14:
              if (!(type === 'css')) {
                _context42.next = 20;
                break;
              }

              style = data.replace(/`/g, '\\`').replace(/\\/g, '\\\\'); // .replace(/(\r|\n)/g, ' ')

              _expr = '\n      {\n         let style = document.createElement(\'style\')\n         style.type = \'text/css\'\n         style.innerText = `\n        ' + style + '\n        `\n         document.head.appendChild(style)\n      }\n      ';
              return _context42.abrupt('return', this.evaluate(_expr));

            case 20:
              throw new Error('found invalid type.');

            case 21:
            case 'end':
              return _context42.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'setDeviceScaleFactor',
    value: function setDeviceScaleFactor(deviceScaleFactor) {
      var screen;
      return _regenerator2.default.async(function setDeviceScaleFactor$(_context43) {
        while (1) {
          switch (_context43.prev = _context43.next) {
            case 0:
              _context43.next = 2;
              return _regenerator2.default.awrap(this._getScreenInfo());

            case 2:
              screen = _context43.sent;

              if (!(screen.devicePixelRatio === deviceScaleFactor)) {
                _context43.next = 5;
                break;
              }

              return _context43.abrupt('return');

            case 5:
              this.currentDeviceScaleFactor = deviceScaleFactor;
              return _context43.abrupt('return', this.client.Emulation.setDeviceMetricsOverride({
                width: 0, height: 0, deviceScaleFactor: deviceScaleFactor, mobile: false
              }));

            case 7:
            case 'end':
              return _context43.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'emulate',
    value: function emulate(deviceName) {
      var device, platform;
      return _regenerator2.default.async(function emulate$(_context44) {
        while (1) {
          switch (_context44.prev = _context44.next) {
            case 0:
              _context44.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              if (this.emulateMode) {
                _context44.next = 6;
                break;
              }

              _context44.next = 5;
              return _regenerator2.default.awrap(this.evaluate('return navigator.userAgent'));

            case 5:
              this.userAgentBeforeEmulate = _context44.sent;

            case 6:
              device = devices[deviceName];
              _context44.next = 9;
              return _regenerator2.default.awrap(this.client.Emulation.setDeviceMetricsOverride({
                width: device.width,
                height: device.height,
                deviceScaleFactor: device.deviceScaleFactor,
                mobile: device.mobile,
                fitWindow: false,
                scale: device.pageScaleFactor
              }));

            case 9:
              platform = device.mobile ? 'mobile' : 'desktop';
              _context44.next = 12;
              return _regenerator2.default.awrap(this.client.Emulation.setTouchEmulationEnabled({ enabled: true, configuration: platform }));

            case 12:
              _context44.next = 14;
              return _regenerator2.default.awrap(this.userAgent(device.userAgent));

            case 14:
              this.currentEmulateDeviceName = deviceName;
              this.emulateMode = true;

            case 16:
            case 'end':
              return _context44.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'clearEmulate',
    value: function clearEmulate() {
      return _regenerator2.default.async(function clearEmulate$(_context45) {
        while (1) {
          switch (_context45.prev = _context45.next) {
            case 0:
              _context45.next = 2;
              return _regenerator2.default.awrap(this.client.Emulation.clearDeviceMetricsOverride());

            case 2:
              _context45.next = 4;
              return _regenerator2.default.awrap(this.client.Emulation.setTouchEmulationEnabled({ enabled: false }));

            case 4:
              if (!this.userAgentBeforeEmulate) {
                _context45.next = 7;
                break;
              }

              _context45.next = 7;
              return _regenerator2.default.awrap(this.userAgent(this.userAgentBeforeEmulate));

            case 7:
              this.emulateMode = false;
              this.currentEmulateDeviceName = null;

            case 9:
            case 'end':
              return _context45.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_restoreEmulationSetting',
    value: function _restoreEmulationSetting() {
      return _regenerator2.default.async(function _restoreEmulationSetting$(_context46) {
        while (1) {
          switch (_context46.prev = _context46.next) {
            case 0:
              if (!(this.currentEmulateDeviceName !== null)) {
                _context46.next = 3;
                break;
              }

              _context46.next = 3;
              return _regenerator2.default.awrap(this.emulate(this.currentEmulateDeviceName));

            case 3:
              if (!this.currentDeviceScaleFactor) {
                _context46.next = 6;
                break;
              }

              _context46.next = 6;
              return _regenerator2.default.awrap(this.setDeviceScaleFactor(this.currentDeviceScaleFactor));

            case 6:
            case 'end':
              return _context46.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'blockUrls',
    value: function blockUrls(urls) {
      return _regenerator2.default.async(function blockUrls$(_context47) {
        while (1) {
          switch (_context47.prev = _context47.next) {
            case 0:
              _context47.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              _context47.next = 4;
              return _regenerator2.default.awrap(this.client.Network.setBlockedURLs({ urls: urls }));

            case 4:
            case 'end':
              return _context47.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'clearBrowserCache',
    value: function clearBrowserCache() {
      return _regenerator2.default.async(function clearBrowserCache$(_context48) {
        while (1) {
          switch (_context48.prev = _context48.next) {
            case 0:
              _context48.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              _context48.next = 4;
              return _regenerator2.default.awrap(this.client.Network.clearBrowserCache());

            case 4:
            case 'end':
              return _context48.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'setCookie',
    value: function setCookie(params) {
      var paramArray, currentUrl, i, item;
      return _regenerator2.default.async(function setCookie$(_context49) {
        while (1) {
          switch (_context49.prev = _context49.next) {
            case 0:
              _context49.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              paramArray = null;

              if (Array.isArray(params)) {
                paramArray = params;
              } else {
                paramArray = [params];
              }
              _context49.next = 6;
              return _regenerator2.default.awrap(this.evaluate(function (_) {
                return location.href;
              }));

            case 6:
              currentUrl = _context49.sent;

              paramArray = paramArray.map(function (obj) {
                if (obj.url) {
                  return obj;
                } else {
                  obj.url = currentUrl;
                  return obj;
                }
              });
              _context49.t0 = _regenerator2.default.keys(paramArray);

            case 9:
              if ((_context49.t1 = _context49.t0()).done) {
                _context49.next = 16;
                break;
              }

              i = _context49.t1.value;
              item = paramArray[i];
              _context49.next = 14;
              return _regenerator2.default.awrap(this.client.Network.setCookie(item));

            case 14:
              _context49.next = 9;
              break;

            case 16:
            case 'end':
              return _context49.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'deleteCookie',
    value: function deleteCookie(name) {
      var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var nameArray, paramUrl, i, n;
      return _regenerator2.default.async(function deleteCookie$(_context50) {
        while (1) {
          switch (_context50.prev = _context50.next) {
            case 0:
              _context50.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              nameArray = null;

              if (Array.isArray(name)) {
                nameArray = name;
              } else {
                nameArray = [name];
              }
              paramUrl = url;

              if (url) {
                _context50.next = 9;
                break;
              }

              _context50.next = 8;
              return _regenerator2.default.awrap(this.evaluate(function (_) {
                return location.href;
              }));

            case 8:
              paramUrl = _context50.sent;

            case 9:
              _context50.t0 = _regenerator2.default.keys(nameArray);

            case 10:
              if ((_context50.t1 = _context50.t0()).done) {
                _context50.next = 17;
                break;
              }

              i = _context50.t1.value;
              n = nameArray[i];
              _context50.next = 15;
              return _regenerator2.default.awrap(this.client.Network.deleteCookie({ cookieName: n, url: paramUrl }));

            case 15:
              _context50.next = 10;
              break;

            case 17:
            case 'end':
              return _context50.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'clearAllCookies',
    value: function clearAllCookies() {
      return _regenerator2.default.async(function clearAllCookies$(_context51) {
        while (1) {
          switch (_context51.prev = _context51.next) {
            case 0:
              _context51.next = 2;
              return _regenerator2.default.awrap(this._checkStart());

            case 2:
              _context51.next = 4;
              return _regenerator2.default.awrap(this.client.Network.clearBrowserCookies());

            case 4:
            case 'end':
              return _context51.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'getDOMCounters',
    value: function getDOMCounters() {
      return _regenerator2.default.async(function getDOMCounters$(_context52) {
        while (1) {
          switch (_context52.prev = _context52.next) {
            case 0:
              _context52.next = 2;
              return _regenerator2.default.awrap(this.client.Memory.getDOMCounters());

            case 2:
              return _context52.abrupt('return', _context52.sent);

            case 3:
            case 'end':
              return _context52.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'clearDataForOrigin',
    value: function clearDataForOrigin() {
      var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';
      return _regenerator2.default.async(function clearDataForOrigin$(_context53) {
        while (1) {
          switch (_context53.prev = _context53.next) {
            case 0:
              if (!(origin === null)) {
                _context53.next = 4;
                break;
              }

              _context53.next = 3;
              return _regenerator2.default.awrap(this.evaluate(function (_) {
                return location.origin;
              }));

            case 3:
              origin = _context53.sent;

            case 4:
              _context53.next = 6;
              return _regenerator2.default.awrap(this.client.Storage.clearDataForOrigin({ origin: origin, storageTypes: type }));

            case 6:
              return _context53.abrupt('return', _context53.sent);

            case 7:
            case 'end':
              return _context53.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_checkStart',
    value: function _checkStart() {
      var startingUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return _regenerator2.default.async(function _checkStart$(_context54) {
        while (1) {
          switch (_context54.prev = _context54.next) {
            case 0:
              if (!(this.client === null)) {
                _context54.next = 3;
                break;
              }

              _context54.next = 3;
              return _regenerator2.default.awrap(this.start(startingUrl));

            case 3:
            case 'end':
              return _context54.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_cacheChromeVersion',
    value: function _cacheChromeVersion() {
      return _regenerator2.default.async(function _cacheChromeVersion$(_context55) {
        while (1) {
          switch (_context55.prev = _context55.next) {
            case 0:
              _context55.next = 2;
              return _regenerator2.default.awrap(this._getChromeVersion());

            case 2:
              this._chromeVersion = _context55.sent;

            case 3:
            case 'end':
              return _context55.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: '_getChromeVersion',
    value: function _getChromeVersion() {
      var userAgent, result, v;
      return _regenerator2.default.async(function _getChromeVersion$(_context56) {
        while (1) {
          switch (_context56.prev = _context56.next) {
            case 0:
              userAgent = null;
              _context56.prev = 1;
              _context56.next = 4;
              return _regenerator2.default.awrap(this.client.send('Browser.getVersion'));

            case 4:
              result = _context56.sent;

              userAgent = result.product;
              _context56.next = 10;
              break;

            case 8:
              _context56.prev = 8;
              _context56.t0 = _context56['catch'](1);

            case 10:
              if (!(userAgent === null)) {
                _context56.next = 14;
                break;
              }

              _context56.next = 13;
              return _regenerator2.default.awrap(this.evaluate(function (_) {
                return navigator.userAgent;
              }));

            case 13:
              userAgent = _context56.sent;

            case 14:
              v = userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
              return _context56.abrupt('return', v ? parseInt(v[2], 10) : false);

            case 16:
            case 'end':
              return _context56.stop();
          }
        }
      }, null, this, [[1, 8]]);
    }
  }], [{
    key: 'addCustomDevice',
    value: function addCustomDevice() {
      var cusDevices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (!Array.isArray(cusDevices)) {
        cusDevices = [cusDevices];
      }
      cusDevices.forEach(function (item) {
        devices[item.name] = item;
      });
    }
  }, {
    key: 'cleanup',
    value: function cleanup() {
      var copy, promises;
      return _regenerator2.default.async(function cleanup$(_context57) {
        while (1) {
          switch (_context57.prev = _context57.next) {
            case 0:
              copy = [].concat(instances);
              promises = copy.map(function (i) {
                return i.close();
              });
              _context57.next = 4;
              return _regenerator2.default.awrap(Promise.all(promises));

            case 4:
            case 'end':
              return _context57.stop();
          }
        }
      }, null, this);
    }
  }]);
  return Chromy;
}(Document);

module.exports = Chromy;
//# sourceMappingURL=index.js.map