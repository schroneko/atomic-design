{"version":3,"sources":["../src/functionToSource.js"],"names":["escapeRegExp","str","replace","functionToSource","f","replaces","s","toString","key","v","reg","RegExp","toFunctionForm","wrapFunctionForEvaluation","trim","wrapFunctionForCallFunction","exports"],"mappings":";;AAAA,SAASA,YAAT,CAAuBC,GAAvB,EAA4B;AAC1B;AACA,SAAOA,IAAIC,OAAJ,CAAY,qCAAZ,EAAmD,MAAnD,CAAP;AACD;;AAED,SAASC,gBAAT,CAA2BC,CAA3B,EAA6C;AAAA,MAAfC,QAAe,uEAAJ,EAAI;;AAC3C,MAAIC,IAAIF,EAAEG,QAAF,EAAR;AACA,OAAK,IAAIC,GAAT,IAAgBH,QAAhB,EAA0B;AACxB,QAAII,IAAIJ,SAASG,GAAT,CAAR;AACA,QAAIE,MAAM,IAAIC,MAAJ,CAAWX,aAAaQ,GAAb,CAAX,EAA8B,GAA9B,CAAV;AACAF,QAAIA,EAAEJ,OAAF,CAAUQ,GAAV,EAAeD,CAAf,CAAJ;AACD;AACD,SAAOH,CAAP;AACD;;AAED,SAASM,cAAT,CAAyBR,CAAzB,EAA2C;AAAA,MAAfC,QAAe,uEAAJ,EAAI;;AACzC,MAAK,OAAOD,CAAR,KAAe,UAAnB,EAA+B;AAC7B,WAAOD,iBAAiBC,CAAjB,EAAoBC,QAApB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,kBAAkBF,iBAAiBC,CAAjB,EAAoBC,QAApB,CAAlB,GAAkD,GAAzD;AACD;AACF;;AAED,SAASQ,yBAAT,CAAoCT,CAApC,EAAsD;AAAA,MAAfC,QAAe,uEAAJ,EAAI;;AACpD,MAAIC,IAAI,MAAMM,eAAeR,CAAf,EAAkBC,QAAlB,CAAN,GAAoC,KAA5C;AACA;AACA,SAAO,kCAEYC,CAFZ,gNAULQ,IAVK,EAAP;AAWD;;AAED,SAASC,2BAAT,CAAsCX,CAAtC,EAAwD;AAAA,MAAfC,QAAe,uEAAJ,EAAI;;AACtD,MAAIC,IAAI,MAAMM,eAAeR,CAAf,EAAkBC,QAAlB,CAAN,GAAoC,KAA5C;AACA;AACA,SAAO,8CAEYC,CAFZ,8NAULQ,IAVK,EAAP;AAWD;;AAEDE,QAAQb,gBAAR,GAA2BA,gBAA3B;AACAa,QAAQH,yBAAR,GAAoCA,yBAApC;AACAG,QAAQD,2BAAR,GAAsCA,2BAAtC","file":"functionToSource.js","sourcesContent":["function escapeRegExp (str) {\n  // eslint-disable-next-line\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&')\n}\n\nfunction functionToSource (f, replaces = {}) {\n  let s = f.toString()\n  for (let key in replaces) {\n    let v = replaces[key]\n    let reg = new RegExp(escapeRegExp(key), 'g')\n    s = s.replace(reg, v)\n  }\n  return s\n}\n\nfunction toFunctionForm (f, replaces = {}) {\n  if ((typeof f) === 'function') {\n    return functionToSource(f, replaces)\n  } else {\n    return 'function () {' + functionToSource(f, replaces) + '}'\n  }\n}\n\nfunction wrapFunctionForEvaluation (f, replaces = {}) {\n  let s = '(' + toFunctionForm(f, replaces) + ')()'\n  // If the result is an instanceof of Promise, It's resolved in context of nodejs later.\n  return `\n    {\n      let result = ${s};\n      if (result instanceof Promise) {\n        result\n      } else {\n        let json = JSON.stringify(result);\n        JSON.stringify({type: (typeof result), result: json});\n      }\n    }\n  `.trim()\n}\n\nfunction wrapFunctionForCallFunction (f, replaces = {}) {\n  let s = '(' + toFunctionForm(f, replaces) + ')()'\n  // If the result is an instanceof of Promise, It's resolved in context of nodejs later.\n  return `\n    function () {\n      let result = ${s};\n      if (result instanceof Promise) {\n        return result\n      } else {\n        let json = JSON.stringify(result);\n        return JSON.stringify({type: (typeof result), result: json});\n      }\n    }\n  `.trim()\n}\n\nexports.functionToSource = functionToSource\nexports.wrapFunctionForEvaluation = wrapFunctionForEvaluation\nexports.wrapFunctionForCallFunction = wrapFunctionForCallFunction\n\n"]}