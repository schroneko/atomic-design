{"version":3,"sources":["../src/emulation.js"],"names":["FullscreenEmulationManager","chromy","model","captureSelector","useDeviceResolution","_chromy","_client","client","_model","_captureSelector","_useDeviceResolution","browserInfo","width","height","_getScreenInfo","info","DOM","getDocument","documentNodeId","root","nodeId","querySelector","selector","bodyNodeId","getBoxModel","box","_deviceMetrics","deviceScaleFactor","mobile","fitWindow","_chromeVersion","devicePixelRatio","m","Emulation","setVisibleSize","forceViewport","x","y","scale","resetPageScaleFactor","setDeviceMetricsOverride","scrollTo","sleep","resetViewport","clearDeviceMetricsOverride","viewportWidth","viewportHeight","createFullscreenEmulationManager","manager","init","exports"],"mappings":"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","file":"emulation.js","sourcesContent":["class FullscreenEmulationManager {\n  constructor (chromy, model, captureSelector, useDeviceResolution) {\n    this._chromy = chromy\n    this._client = chromy.client\n    this._model = model\n    this._captureSelector = captureSelector\n    this._useDeviceResolution = useDeviceResolution\n    this.browserInfo = null\n  }\n\n  async init () {\n    let width = 0\n    let height = 0\n    const info = await this._chromy._getScreenInfo()\n    this.browserInfo = info\n    if (this._model === 'box') {\n      const DOM = this._client.DOM\n      const {root: {nodeId: documentNodeId}} = await DOM.getDocument()\n      const {nodeId: bodyNodeId} = await DOM.querySelector({\n        selector: 'body',\n        nodeId: documentNodeId,\n      })\n      const box = await DOM.getBoxModel({nodeId: bodyNodeId})\n      width = box.model.width\n      height = box.model.height\n    } else {\n      width = info.width\n      height = info.height\n    }\n    this._deviceMetrics = {\n      width,\n      height,\n      deviceScaleFactor: 0,\n      mobile: false,\n      fitWindow: false,\n    }\n    if (this._captureSelector && this._deviceMetrics.height > 10000) {\n      this._deviceMetrics.height = 10000\n    }\n    if (this._chromy._chromeVersion >= 61) {\n      if (this._useDeviceResolution) {\n        this._deviceMetrics.deviceScaleFactor = info.devicePixelRatio\n      } else {\n        this._deviceMetrics.deviceScaleFactor = 1\n      }\n    }\n  }\n\n  async emulate () {\n    const m = this._deviceMetrics\n    if (this._chromy._chromeVersion < 61) {\n      await this._client.Emulation.setVisibleSize({width: m.width, height: m.height})\n      await this._client.Emulation.forceViewport({x: 0, y: 0, scale: 1})\n    } else {\n      await this._client.Emulation.resetPageScaleFactor()\n    }\n    await this._client.Emulation.setDeviceMetricsOverride(m)\n    await this._chromy.scrollTo(0, 0)\n    await this._chromy.sleep(200)\n  }\n\n  async reset () {\n    const info = this.browserInfo\n    if (this._chromy._chromeVersion < 61) {\n      await this._client.Emulation.resetViewport()\n      await this._client.Emulation.clearDeviceMetricsOverride()\n      await this._client.Emulation.setVisibleSize({width: info.viewportWidth, height: info.viewportHeight})\n    } else {\n      await this._client.Emulation.clearDeviceMetricsOverride()\n    }\n  }\n}\n\nasync function createFullscreenEmulationManager (chromy, model, captureSelector = false, useDeviceResolution = false) {\n  const manager = new FullscreenEmulationManager(chromy, model, captureSelector, useDeviceResolution)\n  await manager.init()\n  return manager\n}\n\nexports.createFullscreenEmulationManager = createFullscreenEmulationManager\n"]}