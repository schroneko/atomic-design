'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

require('babel-polyfill');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RESULT_FUNCTION_NAME = '___RESULT_FUNCTION';

var ChainObject = function () {
  function ChainObject(target, options) {
    (0, _classCallCheck3.default)(this, ChainObject);

    var defaults = {
      debug: false
    };
    this.target = target;
    this.options = Object.assign(defaults, options);
    this.actions = [];
  }

  (0, _createClass3.default)(ChainObject, [{
    key: 'addAction',
    value: function addAction(name, args) {
      this.actions.push({ name: name, args: args });
    }
  }, {
    key: 'end',
    value: function end() {
      var result, actions, idx, action;
      return _regenerator2.default.async(function end$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              result = null;
              actions = Object.assign({}, this.actions);

              this.actions = [];
              _context.prev = 3;
              _context.t0 = _regenerator2.default.keys(actions);

            case 5:
              if ((_context.t1 = _context.t0()).done) {
                _context.next = 20;
                break;
              }

              idx = _context.t1.value;
              action = actions[idx];

              if (this.options.debug) {
                console.log('[async-chain-proxy] execute \'' + action.name + '\'');
              }

              if (!(RESULT_FUNCTION_NAME === action.name)) {
                _context.next = 15;
                break;
              }

              _context.next = 12;
              return _regenerator2.default.awrap(action.args[0].apply(null, [result]));

            case 12:
              result = _context.sent;
              _context.next = 18;
              break;

            case 15:
              _context.next = 17;
              return _regenerator2.default.awrap(this.target[action.name].apply(this.target, action.args));

            case 17:
              result = _context.sent;

            case 18:
              _context.next = 5;
              break;

            case 20:
              _context.next = 26;
              break;

            case 22:
              _context.prev = 22;
              _context.t2 = _context['catch'](3);

              if (this.options.debug) {
                console.log(_context.t2);
              }
              throw _context.t2;

            case 26:
              return _context.abrupt('return', result);

            case 27:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this, [[3, 22]]);
    }
  }]);
  return ChainObject;
}();

function makeHandler(target, options) {
  return {
    get: function get(chainObj, name) {
      if (name === options.endFuncName) {
        return function () {
          return chainObj.end(chainObj, arguments).then(function (result) {
            if (options.onChainFinished) {
              options.onChainFinished(target);
            }
            return result;
          }).catch(function (e) {
            if (options.debug) {
              console.log(e);
            }
            throw e;
          });
        };
      } else if (name === options.resultFuncName) {
        return function () {
          chainObj.addAction(RESULT_FUNCTION_NAME, arguments);
          return this;
        };
      } else if (name === 'target') {
        return target;
      } else if (typeof target[name] === 'function') {
        return function () {
          chainObj.addAction(name, arguments);
          return this;
        };
      } else if (name in target) {
        return target[name];
      } else {
        throw new Error('\'' + name + '\' is not defined on a target object.');
      }
    },
    set: function set(chainObj, name, value) {
      throw new Error('You cannot set a value to Proxy object.');
    }
  };
}

function createChainObject(target) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var defaultParams = {
    debug: false,
    resultFuncName: 'result',
    endFuncName: 'end',
    onChainFinished: null
  };
  options = Object.assign(defaultParams, options);
  var chainObject = new ChainObject(target, options);
  return new Proxy(chainObject, makeHandler(target, options));
}

module.exports = createChainObject;
//# sourceMappingURL=index.js.map