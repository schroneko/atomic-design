'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = initComposer;

var _store = require('./store');

var _container = require('./container');

var _container2 = _interopRequireDefault(_container);

var _logger = require('../utils/logger');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-line
var logger = _logger.loggerOff; // note: debug

function initComposer(env) {
    var addonStoreCompose = (0, _store.getStoreCompose)(env);

    function dataLoader(props, onData, _ref) {
        var addonStore = _ref.addonStore;
        var apiMap = _ref.apiMap;
        var channelInit = _ref.channelInit;

        logger.log('Composer init:', props.initData, addonStore.getAll());

        var setupChannel = channelInit(props.rootProps.enquiry, props.rootProps.ID, props.onChannelInit);
        apiMap.$dataInit(props.initData)();

        var sendData = function sendData(storeData) {
            logger.log('Composer ivoked:', props.initData, props.rootProps, addonStore.getAll());
            var theme = storeData.uiTheme;
            var propsToChild = {
                label: storeData.label, // remove
                index: storeData.index, // remove
                theme: theme, // remove
                data: storeData.data,

                onVote: apiMap.incIndex, // remove
                onLabel: apiMap.setLabel, // remove
                setData: apiMap.setData,
                debugData: apiMap.debugData,

                initData: props.initData, // remove
                //                rootProps: props.rootProps, // remove
                addonControl: props.addonControl,

                setupChannel: setupChannel,
                story: props.story,
                addonRender: props.addonRender,
                addonRenderDisabled: props.addonRenderDisabled || null,

                style: props.style,
                className: props.className
            };
            onData(null, propsToChild);
        };

        var stopSubscription = addonStore.subscribe(sendData);

        sendData(addonStore.getAll());

        return stopSubscription;
    }

    return addonStoreCompose(dataLoader)(_container2.default);
}