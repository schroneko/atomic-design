'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _store = require('../store/store');

var _logger = require('../utils/logger');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// eslint-disable-line

var loggerM = _logger.loggerOff; // note: debug
var loggerR = _logger.loggerOff; // note: debug


var propTypes = {
    story: _propTypes2.default.func,
    setupChannel: _propTypes2.default.func,
    addonRender: _propTypes2.default.element,
    addonRenderDisabled: _propTypes2.default.element,

    setData: _propTypes2.default.func,
    debugData: _propTypes2.default.func,
    initData: _propTypes2.default.any,

    className: _propTypes2.default.string,
    style: _propTypes2.default.shape()
};

var defaultProps = {
    addonRenderDisabled: _react2.default.createElement(
        'p',
        null,
        'Disabled'
    )
};

var RootContainer = function (_React$Component) {
    _inherits(RootContainer, _React$Component);

    function RootContainer(props) {
        var _ref;

        _classCallCheck(this, RootContainer);

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, (_ref = RootContainer.__proto__ || Object.getPrototypeOf(RootContainer)).call.apply(_ref, [this, props].concat(args)));

        loggerM.log('* constructor: ' + props.initData);

        _this.stopChannel = null;
        _this.stopControl = null;
        _this.state = {
            containerEnabled: false };

        _this.setMode = _this.setMode.bind(_this);

        _this.isMount = false; // fixme:
        return _this;
    }

    _createClass(RootContainer, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            loggerM.log('* componentWillMount: ' + this.props.initData);
            this.setMode(true);
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.isMount = true;
            loggerM.log('* componentDidMount: ' + this.props.initData);
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
            if (this.state.containerEnabled === false && nextState.containerEnabled === false) {
                return false;
            }
            if (this.props.initData === 'ADK Panel') return true;
            loggerM.info('* shouldComponentUpdate: ' + this.props.initData, nextProps, nextState);
            return true;
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.isMount = false;
            loggerM.log('* componentWillUnmount: ' + this.props.initData);
            this.setMode(false);
        }
    }, {
        key: 'setMode',
        value: function setMode(enabled) {
            var _this2 = this;

            var setupChannel = this.props.setupChannel;


            var onChannelSetup = function onChannelSetup(info) {
                var enableByChan = info.channelRole !== _store.CHANNEL_STOP;

                // todo: get rid of setState here
                if (_this2.isMount) {
                    if (enableByChan !== _this2.state.containerEnabled) {
                        loggerM.log('onChannelSetup:', _this2.isMount, info);
                        _this2.setState({ containerEnabled: enableByChan });
                    }
                }
            };

            if (enabled) {
                this.stopChannel = setupChannel(onChannelSetup); // check: actual data?
            } else {
                if (this.stopChannel) this.stopChannel();
                this.stopChannel = null;
            }
        }
    }, {
        key: 'render',
        value: function render() {
            if (this.props.initData !== 'ADK Panel') {
                loggerM.warn('* render: ' + this.props.initData, this.props, this.state);
            }
            var _props = this.props;
            var style = _props.style;
            var className = _props.className;
            var setData = _props.setData;
            var debugData = _props.debugData;
            var story = _props.story;
            var addonRender = _props.addonRender;
            var addonRenderDisabled = _props.addonRenderDisabled;
            /* const { initData, ID} = addonControl.default;*/

            var initData = this.props.initData;
            var enabled = this.state.containerEnabled;

            var debugInfo = loggerR.on ? _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                    'p',
                    { style: { backgroundColor: enabled ? '#41537b' : '#525252', color: 'white' } },
                    enabled ? 'Enabled!' : 'Disabled*',
                    ', ',
                    _react2.default.createElement('b', null),
                    ' initData: ',
                    _react2.default.createElement(
                        'i',
                        null,
                        initData.toString()
                    )
                ),
                _react2.default.createElement(
                    'button',
                    { onClick: setData(initData) },
                    'setData'
                ),
                _react2.default.createElement(
                    'button',
                    { onClick: debugData() },
                    'debugData'
                )
            ) : null;

            var enabledAddon = function enabledAddon(is) {
                if (!is) {
                    return _react2.default.createElement(
                        'div',
                        null,
                        addonRenderDisabled || null,
                        story ? story() : null
                    );
                }
                return _react2.default.createElement(
                    'div',
                    null,
                    ' ',
                    addonRender || null,
                    ' '
                );
            };

            return _react2.default.createElement(
                'div',
                { style: style, className: className + '-' + (enabled ? 'enabled' : 'disabled') },
                debugInfo,
                enabledAddon(enabled)
            );
        }
    }]);

    return RootContainer;
}(_react2.default.Component);

exports.default = RootContainer;


RootContainer.propTypes = propTypes;
RootContainer.defaultProps = defaultProps;