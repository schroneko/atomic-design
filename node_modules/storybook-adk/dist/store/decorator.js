'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // todo: revert
// todo: move to settings

exports.setStoreSettings = setStoreSettings;
exports.setDefaultData = setDefaultData;
exports.setAddonApi = setAddonApi;
exports.setConfig = setConfig;
exports.decorator = decorator;
exports.buidDecorator = buidDecorator;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _composer = require('../store/composer');

var _composer2 = _interopRequireDefault(_composer);

var _store = require('../store/store');

var _store2 = _interopRequireDefault(_store);

var _ = require('../');

var _logger = require('../utils/logger');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// eslint-disable-line
var logger = _logger.loggerOff; // note: debug
var loggerHot = _logger.loggerOff; // note: debug

var getID = function getID(keyPref) {
    return '' + keyPref + Math.round(Math.random() * 100);
};

var storeSettings = {};

function setStoreSettings(initData) {
    storeSettings = initData;
}

function setDefaultData(data) {
    storeSettings.defaultData = data;
}

function setAddonApi(api) {
    storeSettings.addonApi = api;
}

function setConfig(conf) {
    storeSettings.config = conf;
}

var AddonManager = function () {
    function AddonManager() {
        _classCallCheck(this, AddonManager);

        logger.warn('##### AddonManager ######');
        this.defaultData = {};
        this.addonApi = {};
        this.addonConfig = {};
        this.storesMap = {};
        this.subscribers = [];

        //        this.setDefaultData = this.setDefaultData.bind(this);
        //        this.setAddonApi = this.setAddonApi.bind(this);
        //        this.setConfig = this.setConfig.bind(this);
        //        this.newStore = this.newStore.bind(this);
    }

    _createClass(AddonManager, [{
        key: 'setDefaultData',
        value: function setDefaultData(data) {
            this.defaultData = data;
        }
    }, {
        key: 'setAddonApi',
        value: function setAddonApi(api) {
            this.addonApi = _extends({}, this.addonApi, api);
        }
    }, {
        key: 'setConfig',
        value: function setConfig(conf) {
            this.addonConfig = conf;
        }
    }, {
        key: 'subscribe',
        value: function subscribe(fn) {
            var _this = this;

            this.subscribers.push(fn);
            var stopped = false;

            var stop = function stop() {
                if (stopped) return;
                var index = _this.subscribers.indexOf(fn);
                _this.subscribers.splice(index, 1);
                stopped = true;
            };

            return stop;
        }
    }, {
        key: 'fireSubscriptions',
        value: function fireSubscriptions(currentStore) {
            this.subscribers.forEach(function (fn) {
                fn(currentStore);
            });
        }
    }, {
        key: 'storeSave',
        value: function storeSave(context, store, keyPref) {
            var key = keyPref + '::' + context.kind;
            this.storesMap[key] = store;
        }
    }]);

    return AddonManager;
}();

var decorStoresMap = {};

function newStore() {
    return (0, _store2.default)(storeSettings);
}

function getDecor(initData, keyPref, decorComposer, decorComposerDisabled, keyGen) {
    var key = void 0;
    var addonStoreEnv = void 0;
    var Decorator = void 0;
    var addonDecorator = void 0;

    var isHotReload = true;

    return function (storyFn, context) {
        key = keyGen(keyPref, context);
        if (!decorStoresMap[key]) {
            decorStoresMap[key] = decorStoresMap[key] || addonStoreEnv || newStore();

            loggerHot.info('Init store for ' + key, decorStoresMap);
        }
        if (isHotReload) {
            loggerHot.log('Fetch store for ' + key, decorStoresMap);
            addonStoreEnv = decorStoresMap[key];
            Decorator = (0, _composer2.default)(addonStoreEnv);
            addonDecorator = decorComposer(addonStoreEnv);

            isHotReload = false;
        }

        return _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(Decorator, {
                initData: initData,
                rootProps: {
                    enquiry: _store.ENQ_SEND,
                    ID: getID(keyPref),
                    context: context
                },
                story: storyFn,
                addonRender: addonDecorator(storyFn, initData, 'rootProps'),
                addonRenderDisabled: decorComposerDisabled,
                style: { width: '100%' },
                className: _.CSS_CLASS + '-decorator-' + keyPref
            })
        );
    };
}

function decorator(initData, pref) {
    var keyPref = pref || 'lc';
    logger.log('addDecorator', keyPref);
    var deco = getDecor(initData, keyPref, null);
    return deco;
}

var keyGenDiff = function keyGenDiff(keyPref, context) {
    return keyPref + '::' + context.kind;
};

function buidDecorator(initData, decorComposer, keyPref) {
    var keyGen = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : keyGenDiff;
    var decorComposerDisabled = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

    var deco = getDecor(initData, keyPref, decorComposer, decorComposerDisabled, keyGen);
    return deco;
}