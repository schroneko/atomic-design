'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PerfContainer = exports.ControllerContainer = exports.ControllerPresenter = exports.Timing = exports.Actions = exports.Settings = exports.Tabs = exports.SubSection = exports.Section = exports.FlexColumn = exports.FlexRow = exports.TabButton = exports.SqButton = exports.SButton = exports.Button = exports.styles = exports.settingsSectionStyle = exports.printSettingsStyle = exports.sectionStyle = exports.subSectionStyle = exports.tabButtonStyle = exports.tabStyle = exports.planeListStyle = exports.flexColumnStyle = exports.flexRowStyle = exports.printsStyle = exports.hiddenStyle = exports.actionsStyleBottom = exports.actionsStyle = exports.bodyStyle = exports.rootStyle = exports.sqButtonStyle = exports.sButtonStyle = exports.buttonStyle = exports.borderStyle = exports.printTypes = exports.emojis = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.withStyle = withStyle;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _recompose = require('recompose');

var _reactAddonsPerf = require('react-addons-perf');

var _reactAddonsPerf2 = _interopRequireDefault(_reactAddonsPerf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var emojis = exports.emojis = {
  CROSS_MARK: '❌',
  UP_ARROW: '⬆️',
  DOWN_ARROW: '⬇️'
};

var printTypes = exports.printTypes = ['printWasted', 'printOperations', 'printInclusive', 'printExclusive'];

var borderStyle = exports.borderStyle = {
  border: '1px solid #c1c1c1',
  borderRadius: '2px',
  color: '#828282'
};

var buttonStyle = exports.buttonStyle = _extends({}, borderStyle, {
  fontSize: '12px',
  padding: '0.5em 1em'
});

var sButtonStyle = exports.sButtonStyle = _extends({}, borderStyle, {
  fontSize: '12px',
  padding: '0.5em 1em'
});

var sqButtonStyle = exports.sqButtonStyle = _extends({}, borderStyle, {
  backgroundColor: '#f7f7f7',
  fontSize: '8px',
  height: '3em',
  width: '3em'
});

var rootStyle = exports.rootStyle = {
  height: '100vh',
  position: 'relative'
};

var bodyStyle = exports.bodyStyle = {
  width: '11em'
};

var actionsStyle = exports.actionsStyle = {
  color: '#828282',
  position: 'absolute',
  right: 0,
  textAlign: 'right',
  top: 0
};

var actionsStyleBottom = exports.actionsStyleBottom = _extends({}, actionsStyle, {
  bottom: 0,
  top: 'initial'
});

var hiddenStyle = exports.hiddenStyle = {
  display: 'none',
  visibility: 'hidden'
};

var printsStyle = exports.printsStyle = {
  display: 'flex',
  flexDirection: 'column'
};

var flexRowStyle = exports.flexRowStyle = {
  display: 'flex',
  flexDirection: 'row',
  justifyContent: 'space-between'
};

var flexColumnStyle = exports.flexColumnStyle = {
  display: 'flex',
  flexDirection: 'column'
};

var planeListStyle = exports.planeListStyle = {
  margin: '0',
  listStyleType: 'none'
};

var tabStyle = exports.tabStyle = {
  flex: '1'
};

var tabButtonStyle = exports.tabButtonStyle = _extends({}, buttonStyle, {
  borderRadius: 0,
  width: '100%'
});

var subSectionStyle = exports.subSectionStyle = _extends({}, borderStyle, {
  backgroundColor: '#fff',
  padding: '.5em'
});

var sectionStyle = exports.sectionStyle = _extends({}, borderStyle, {
  backgroundColor: '#f7f7f7',
  padding: '.5em'
});

var printSettingsStyle = exports.printSettingsStyle = {
  fontSize: '10px',
  textAlign: 'left'
};

var settingsSectionStyle = exports.settingsSectionStyle = {
  paddingBottom: '.5em'
};

var styles = exports.styles = {
  section: _extends({}, borderStyle, {
    backgroundColor: '#f7f7f7',
    padding: '1em'
  }),
  types: {
    display: 'none'
  },
  button: _extends({}, borderStyle, {
    fontSize: '12px',
    padding: '0.5em 1em'
  }),
  sButton: _extends({}, borderStyle, {
    fontSize: '8px',
    padding: '0.5em 1em'
  })
};

function withStyle(style) {
  var Tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';

  style = _extends({}, style);
  return function (_ref) {
    var customStyle = _ref.style,
        props = _objectWithoutProperties(_ref, ['style']);

    return _react2.default.createElement(Tag, _extends({ style: !customStyle ? style : _extends({}, style, customStyle) }, props));
  };
}

function action2button(action, idx) {
  return _react2.default.createElement(
    Button,
    { key: idx, onClick: action[1] },
    action[0]
  );
}

action2button.displayName = 'action2button';
var Button = exports.Button = withStyle(buttonStyle, 'button');
var SButton = exports.SButton = withStyle(sButtonStyle, 'button');
var SqButton = exports.SqButton = withStyle(sqButtonStyle, 'button');
var TabButton = exports.TabButton = withStyle(tabButtonStyle, 'button');
var FlexRow = exports.FlexRow = withStyle(flexRowStyle);
var FlexColumn = exports.FlexColumn = withStyle(flexColumnStyle);
var Section = exports.Section = withStyle(sectionStyle);
var SubSection = exports.SubSection = withStyle(subSectionStyle);

var Tabs = exports.Tabs = (0, _recompose.pure)(function (_ref2) {
  var items = _ref2.items;
  return _react2.default.createElement(
    'ul',
    { style: _extends({}, planeListStyle, flexRowStyle) },
    items.map(function (item, idx) {
      return _react2.default.createElement(
        'li',
        { key: idx, style: tabStyle },
        _react2.default.createElement(
          TabButton,
          { onClick: item[1] },
          item[0]
        )
      );
    })
  );
});

var Settings = (0, _recompose.pure)(function (_ref3) {
  var onChangeFlag = _ref3.onChangeFlag,
      printTypeSets = _ref3.printTypeSets,
      props = _objectWithoutProperties(_ref3, ['onChangeFlag', 'printTypeSets']);

  return _react2.default.createElement(
    SubSection,
    props,
    _react2.default.createElement(
      'div',
      { style: printSettingsStyle },
      printTypes.map(function (type, idx) {
        return _react2.default.createElement(
          'div',
          { key: idx },
          _react2.default.createElement('input', { id: 'perf_' + type, 'data-type': type, type: 'checkbox', defaultChecked: printTypeSets[type], onChange: onChangeFlag }),
          _react2.default.createElement(
            'label',
            { htmlFor: 'perf_' + type },
            type
          )
        );
      })
    )
  );
});

exports.Settings = Settings;
var Actions = exports.Actions = (0, _recompose.pure)(function (_ref4) {
  var items = _ref4.items,
      onChangeFlag = _ref4.onChangeFlag,
      printTypeSets = _ref4.printTypeSets;
  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(
      'div',
      { style: settingsSectionStyle },
      _react2.default.createElement(Settings, {
        onChangeFlag: onChangeFlag,
        printTypeSets: printTypeSets
      })
    ),
    _react2.default.createElement(
      FlexColumn,
      null,
      items.map(action2button)
    )
  );
});

var Timing = exports.Timing = (0, _recompose.pure)(function (_ref5) {
  var actions = _ref5.actions;
  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(
      FlexRow,
      null,
      actions.slice(0, 2).map(action2button)
    ),
    _react2.default.createElement(
      FlexColumn,
      null,
      actions.slice(2).map(action2button)
    )
  );
});

var ControllerPresenter = exports.ControllerPresenter = (0, _recompose.pure)(function (_ref6) {
  var layout = _ref6.layout,
      display = _ref6.display,
      selected = _ref6.selected,
      toggle = _ref6.toggle,
      toggleLayout = _ref6.toggleLayout,
      actions = _ref6.actions,
      tabActions = _ref6.tabActions,
      onChangeFlag = _ref6.onChangeFlag,
      printTypeSets = _ref6.printTypeSets,
      printActions = _ref6.printActions;
  return _react2.default.createElement(
    'div',
    { style: layout === 'top' ? actionsStyle : actionsStyleBottom },
    _react2.default.createElement(
      SqButton,
      { onClick: toggleLayout },
      layout === 'top' ? emojis.DOWN_ARROW : emojis.UP_ARROW
    ),
    _react2.default.createElement(
      SqButton,
      { onClick: toggle },
      display ? emojis.CROSS_MARK : '>'
    ),
    !display ? null : _react2.default.createElement(
      'div',
      { style: bodyStyle },
      _react2.default.createElement(Tabs, { items: tabActions }),
      _react2.default.createElement(
        Section,
        null,
        selected === 'Actions' ? _react2.default.createElement(Actions, {
          items: actions,
          onChangeFlag: onChangeFlag,
          printTypeSets: printTypeSets
        }) : _react2.default.createElement(Timing, { actions: printActions })
      )
    )
  );
});

var ControllerContainer = exports.ControllerContainer = function (_PureComponent) {
  _inherits(ControllerContainer, _PureComponent);

  function ControllerContainer() {
    _classCallCheck(this, ControllerContainer);

    var _this = _possibleConstructorReturn(this, (ControllerContainer.__proto__ || Object.getPrototypeOf(ControllerContainer)).call(this));

    ['toggle', 'toggleLayout'].forEach(function (v) {
      return _this[v] = _this[v].bind(_this);
    });
    _this.tabActions = ['Actions', 'Timing'].map(function (method) {
      return [method, _this.onSelect.bind(_this, method)];
    });
    _this.state = {
      display: true,
      layout: 'top',
      selected: 'Actions'
    };
    return _this;
  }

  _createClass(ControllerContainer, [{
    key: 'render',
    value: function render() {
      var tabActions = this.tabActions,
          toggle = this.toggle,
          toggleLayout = this.toggleLayout;
      var _props = this.props,
          actions = _props.actions,
          printActions = _props.printActions,
          onChangeFlag = _props.onChangeFlag,
          printTypeSets = _props.printTypeSets;
      var _state = this.state,
          display = _state.display,
          layout = _state.layout,
          selected = _state.selected;

      return _react2.default.createElement(ControllerPresenter, {
        layout: layout,
        display: display,
        selected: selected,
        toggle: toggle,
        toggleLayout: toggleLayout,
        actions: actions,
        tabActions: tabActions,
        onChangeFlag: onChangeFlag,
        printTypeSets: printTypeSets,
        printActions: printActions
      });
    }
  }, {
    key: 'toggle',
    value: function toggle() {
      this.setState({ display: !this.state.display });
    }
  }, {
    key: 'toggleLayout',
    value: function toggleLayout() {
      this.setState({ layout: this.state.layout !== 'top' ? 'top' : 'bottom' });
    }
  }, {
    key: 'onSelect',
    value: function onSelect(selected) {
      this.setState({ selected: selected });
    }
  }]);

  return ControllerContainer;
}(_react.PureComponent);

ControllerContainer.displayName = 'ControllerContainer';

var PerfContainer = exports.PerfContainer = function (_Component) {
  _inherits(PerfContainer, _Component);

  function PerfContainer() {
    _classCallCheck(this, PerfContainer);

    var _this2 = _possibleConstructorReturn(this, (PerfContainer.__proto__ || Object.getPrototypeOf(PerfContainer)).call(this));

    ['onChangeFlag', 'print'].forEach(function (method) {
      return _this2[method] = _this2[method].bind(_this2);
    });
    _this2.printTypes = {};
    return _this2;
  }

  _createClass(PerfContainer, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this3 = this;

      var _props2 = this.props,
          debug = _props2.debug,
          props = _objectWithoutProperties(_props2, ['debug']);

      this.state = _extends({}, props);
      this.component = debug.component;
      this.actions = Object.keys(debug.actions).map(function (label) {
        return [label, function () {
          var action = debug.actions[label].bind(_this3);
          _this3.startPerf();
          action(function () {
            _this3.stopPerf();
            _this3.print();
          });
        }];
      });
      this.printActions = ['startPerf', 'stopPerf'].concat(printTypes).map(function (method) {
        return [method, _this3[method].bind(_this3)];
      });
      Object.keys(debug.defaultPrintTypes).forEach(function (type) {
        return _this3.printTypes[type] = debug.defaultPrintTypes[type];
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var component = this.component,
          actions = this.actions,
          onChangeFlag = this.onChangeFlag,
          printTypes = this.printTypes,
          printActions = this.printActions;

      return _react2.default.createElement(
        'div',
        { style: rootStyle },
        component(_extends({}, this.state)),
        _react2.default.createElement(ControllerContainer, {
          actions: actions,
          onChangeFlag: onChangeFlag,
          printTypeSets: printTypes,
          printActions: printActions
        })
      );
    }
  }, {
    key: 'onChangeFlag',
    value: function onChangeFlag(e) {
      var target = e.currentTarget;
      this.printTypes[target.dataset.type] = target.checked;
    }
  }, {
    key: 'print',
    value: function print() {
      var _this4 = this;

      printTypes.forEach(function (type) {
        return _this4.printTypes[type] && _reactAddonsPerf2.default[type]();
      });
    }
  }, {
    key: 'startPerf',
    value: function startPerf() {
      _reactAddonsPerf2.default.start();
    }
  }, {
    key: 'stopPerf',
    value: function stopPerf() {
      _reactAddonsPerf2.default.stop();
    }
  }, {
    key: 'printWasted',
    value: function printWasted() {
      _reactAddonsPerf2.default.printWasted();
    }
  }, {
    key: 'printOperations',
    value: function printOperations() {
      _reactAddonsPerf2.default.printOperations();
    }
  }, {
    key: 'printInclusive',
    value: function printInclusive() {
      _reactAddonsPerf2.default.printInclusive();
    }
  }, {
    key: 'printExclusive',
    value: function printExclusive() {
      _reactAddonsPerf2.default.printExclusive();
    }
  }]);

  return PerfContainer;
}(_react.Component);

PerfContainer.displayName = 'PerfContainer';

exports.default = function (_ref7) {
  var actions = _ref7.actions,
      props = _ref7.props,
      _ref7$defaultPrintTyp = _ref7.defaultPrintTypes,
      defaultPrintTypes = _ref7$defaultPrintTyp === undefined ? { printWasted: true } : _ref7$defaultPrintTyp;
  return function (component) {
    return _react2.default.createElement(PerfContainer, _extends({ debug: { component: component, actions: actions, defaultPrintTypes: defaultPrintTypes } }, props));
  };
};